/*
		if (key == null) {
			throw new NullPointerException("null key");
		} // if

		if (front.get(0) == null) {
			SLNode<K, V> newNode = new SLNode<K, V>(key, value, randomHeight());
			for (int i = 0; i < newNode.next.size(); i++) {
				this.front.set(i, newNode);
			}
			return null;
		}
		ArrayList<SLNode<K, V>> nodeList = (ArrayList<SLNode<K, V>>) front.clone();
		SLNode<K, V> current;
		for (int currHeight = this.height - 1; currHeight >= 0; currHeight--) {
			current = nodeList.get(currHeight);
			while (current != null && current.next.get(currHeight) != null
					&& this.comparator.compare(key, current.next.get(currHeight).key) > 0) {
				current = current.next.get(currHeight);
				// current = current.next.get(currHeight);
			}

			if (current != null && current.next.get(currHeight) != null
					&& current.next.get(currHeight).key.equals(key)) {
				V toReturn = current.next.get(currHeight).value;
				current.next.get(currHeight).value = value;
				return toReturn;
			} else {
				nodeList.set(currHeight, current);
			}
			
		}

		SLNode<K, V> newNode = new SLNode<K, V>(key, value, randomHeight());
		for (int i = 0; i < newNode.next.size(); i++) {
			if (nodeList.get(i) == null) {
				newNode.next.set(i, null);
				front.set(i, newNode);
			} else if (nodeList.get(i).key.equals(this.front.get(i).key)) {
				newNode.next.set(i, front.get(i));
				front.set(i, newNode);

			} else {
				newNode.next.set(i, nodeList.get(i).next.get(i));
				nodeList.get(i).next.set(i, newNode);
			}
		}
		return null;
		*/